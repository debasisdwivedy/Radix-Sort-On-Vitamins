#ifndef RadixSort_H
#define RadixSort_H
#include<iostream>
#include<Math.h>
#include<vector>
#include<cstring>
#include<sstream>
#include<cmath>
#include<bitset>
using namespace std;
std::vector<int>  countingSort(std::vector<int>,std::vector<int>&,int ,int ,int );
std::vector<string> changeBase(std::vector<int>& ,std::vector<string>& , int base);
std::vector<string>  countingSortBase(std::vector<string> ,std::vector<string>& ,int ,int );
void floatRadixSort(std::vector<float> ,std::vector<float>& ,int ,int );
void radixFloatSort(std::vector<bitset<sizeof(int) * 8> > ,std::vector<bitset<sizeof(int) * 8> >& );
std::vector<bitset<sizeof(int) * 8> >  countingFloatSort(std::vector<bitset<sizeof(int) * 8> > ,std::vector<bitset<sizeof(int) * 8> >& ,bitset<sizeof(int) * 8> );
float GetFloat32( std::string );
int findNumericalValue(char );

void floatRadixSort(std::vector<float> inputArr,std::vector<float>& outArr)
{
    //cout<<"in floatRadixSort"<<endl;
    std::vector<bitset<sizeof(int) * 8> > inputPositiveBitsetArr;
    std::vector<bitset<sizeof(int) * 8> > inputNegetiveBitsetArr;
    for(int i=0;i<inputArr.size();i++)
    {
        int x = *(int *)&inputArr[i];
        std::bitset<sizeof(int) * 8> binary(x);
        if(inputArr[i]>0)
        {
            inputPositiveBitsetArr.push_back(binary) ;
        }
        else{
            inputNegetiveBitsetArr.push_back(binary);
        }
    }
    //cout<<"after + and -"<<inputPositiveBitsetArr.size()<<"-----"<<inputNegetiveBitsetArr.size()<<endl;
    std::vector<bitset<sizeof(int) * 8> > inputPositiveBitsetOutputArr(inputPositiveBitsetArr.size(),0);
    std::vector<bitset<sizeof(int) * 8> > inputNegetiveBitsetOutputArr(inputNegetiveBitsetArr.size(),0);
    radixFloatSort(inputPositiveBitsetArr,inputPositiveBitsetOutputArr);
    radixFloatSort(inputNegetiveBitsetArr,inputNegetiveBitsetOutputArr);
    std::reverse(inputNegetiveBitsetOutputArr.begin(),inputNegetiveBitsetOutputArr.end());
    inputNegetiveBitsetOutputArr.insert(inputNegetiveBitsetOutputArr.end(),inputPositiveBitsetOutputArr.begin(), inputPositiveBitsetOutputArr.end() );
    for(int i=0;i<outArr.size();i++)
    {
        bitset<sizeof(int) * 8> b=inputNegetiveBitsetOutputArr[i];
        outArr[i]=GetFloat32(b.to_string());
    }

}

void radixFloatSort(std::vector<bitset<sizeof(int) * 8> > inputArr,std::vector<bitset<sizeof(int) * 8> >& outArr)
{
    //cout<<"in radixFloatSort"<<endl;
    for (int i = 0; i < sizeof(int) * 8; i++) {
        int size=inputArr.size();
        int m=pow(2,i);
        std::bitset<sizeof(int) * 8> binary(m);
        //cout<<i<<endl;
        //cout<<binary<<endl;
        inputArr=countingFloatSort(inputArr,outArr,binary);
    }
}

std::vector<bitset<sizeof(int) * 8> >  countingFloatSort(std::vector<bitset<sizeof(int) * 8> > inputArr,std::vector<bitset<sizeof(int) * 8> >& outArr,bitset<sizeof(int) * 8> b)
{
    //cout<<"in countingFloatSort"<<endl;
    int size=inputArr.size();
    std::vector<int> c(2,0);
    int digit=0;
    //cout<<b<<endl;
    //cout<<"in firstloop"<<endl;
    for (int i = 0; i < size; ++i) {
        std::bitset<sizeof(int) * 8> bitcounter(inputArr[i]&b);
        digit=(int) bitcounter.to_ulong();
        if(digit!=0)
        {
            digit=1;
        }
        c[digit]=c[digit]+1;
    }
    //cout<<"initialize the bins"<<endl;
    for (int j = 1; j <2 ; ++j) {
        c[j]=c[j]+c[j-1];
    }
     //cout<<"in thirdloop"<<endl;
    for (int k = size-1; k >=0 ; k--) {
        std::bitset<sizeof(int) * 8> bitcounter(inputArr[k]&b);
        digit=(int) bitcounter.to_ulong();
        if(digit!=0)
        {
            digit=1;
        }
        c[digit]=c[digit]-1;
        outArr[c[digit]]=inputArr[k];
    }
    return outArr;
}

float GetFloat32( std::string Binary )
{
    std::bitset<sizeof(int) * 8> set(Binary);
    int HexNumber= set.to_ulong();

    bool negative  = !!(HexNumber & 0x80000000);
    int  exponent  =   (HexNumber & 0x7f800000) >> 23;
    int sign = negative ? -1 : 1;

    // Subtract 127 from the exponent
    exponent -= 127;

    // Convert the mantissa into decimal using the
    // last 23 bits
    int power = -1;
    float total = 0.0;
    for ( int i = 0; i < 23; i++ )
    {
        int c = Binary[ i + 9 ] - '0';
        total += (float) c * (float) pow( 2.0, power );
        power--;
    }
    total += 1.0;

    float value = sign * (float) pow( 2.0, exponent ) * total;

    return value;
}

void radixSort(std::vector<int> inputArr,std::vector<int>& outArr,int max_digit,int base)
{
    //cout<<"in radixsort"<<endl;
    for (int i = 0; i < 1; i++) {
        //int size= sizeof(inputArr)/ sizeof(int);
        int size=inputArr.size();
        //outArr[size]={};
        int m=pow(10,i+1);
        int n=m/10;
        inputArr=countingSort(inputArr,outArr,base,m,n);

    }
}


std::vector<int>  countingSort(std::vector<int> inputArr,std::vector<int>& outArr,int base,int m,int n)
{
    //cout<<"in CountingSort"<<endl;
    //int size= sizeof(inputArr)/ sizeof(int);
    int size=inputArr.size();
    std::vector<int> c(base,0);
    int digit=0;
    //cout<<"in firstloop"<<endl;
    for (int i = 0; i < size; ++i) {
        digit=(inputArr[i]%m)/n;
        c[digit]=c[digit]+1;
    }
    //cout<<"initialize the bins"<<endl;
    for (int j = 1; j <base ; ++j) {
        c[j]=c[j]+c[j-1];
    }
   // cout<<"in thirdloop"<<endl;
    for (int k = size-1; k >=0 ; k--) {
        digit=(inputArr[k]%m)/n;
        /*cout<<inputArr[k]<<endl;
        cout<<m<<endl;
        cout<<n<<endl;
        cout<<digit<<endl;*/
        c[digit]=c[digit]-1;
        outArr[c[digit]]=inputArr[k];
    }
    return outArr;
}

void radixSortBase(std::vector<string> inputArr,std::vector<string>& outArr,int max_digit,int base)
{
    cout<<"in radixsortBase"<<endl;
    for (int i = 0; i < max_digit; i++) {
        //int size= sizeof(inputArr)/ sizeof(int);
        int size=inputArr.size();
        //outArr[size]={};
        //int m=pow(10,i+1);
        //int n=m/10;
        inputArr=countingSortBase(inputArr,outArr,base,i+1);

    }
}

std::vector<string>  countingSortBase(std::vector<string> inputArr,std::vector<string>& outArr,int base,int n)
{
    cout<<"in CountingSortBase"<<endl;
    //int size= sizeof(inputArr)/ sizeof(int);
    int size=inputArr.size();
    std::vector<int> c(base,0);
    int digit=0;
    string s;
    int length=0;
    cout<<"in firstloop"<<endl;

    for (int i = 0; i < size; i++) {
        s=inputArr[i].c_str();
        length=s.length();
        if(n<=length) {
            //std::stringstream stream;
            //stream << s.at(length - n);
            //stream >> std::hex >> digit;
            digit=findNumericalValue(s.at(length - n));
        }
        else {
            digit = 0;
        }
        c[digit]=c[digit]+1;
    }
    cout<<"initialize the bins"<<endl;
    for (int j = 1; j <base ; ++j) {
        c[j]=c[j]+c[j-1];
    }
     cout<<"in thirdloop"<<endl;
    for (int k = size-1; k >=0 ; k--) {
        s=inputArr[k].c_str();
        length=s.length();
        if(n<=length) {
            //std::stringstream stream;
            //stream << s.at(length - n);
            //stream >> std::hex >> digit;
            digit=findNumericalValue(s.at(length - n));
        }
        else {
            digit = 0;
        }
        c[digit]=c[digit]-1;
        outArr[c[digit]]=inputArr[k];
        //cout<<c[digit]<<endl;
    }
    return outArr;
}

int findNumericalValue(char ch)
{
    switch ( ch ) {

        case 'A':
        case 'a':
            return 10;
            break;
        case 'B':
        case 'b':
            return 11;
            break;
        case 'C':
        case 'c':
            return 12;
            break;
        case 'D':
        case 'd':
            return 13;
            break;
        case 'E':
        case 'e':
            return 14;
            break;
        case 'F':
        case 'f':
            return 15;
            break;
        case 'G':
        case 'g':
            return 16;
            break;
        case 'H':
        case 'h':
            return 17;
            break;
        case 'I':
        case 'i':
            return 18;
            break;
        case 'J':
        case 'j':
            return 19;
            break;
        case 'K':
        case 'k':
            return 20;
            break;
        case 'L':
        case 'l':
            return 21;
            break;
        case 'M':
        case 'm':
            return 22;
            break;
        case 'N':
        case 'n':
            return 23;
            break;
        case 'O':
        case 'o':
            return 24;
            break;
        case 'P':
        case 'p':
            return 25;
            break;
        case 'Q':
        case 'q':
            return 26;
            break;
        case 'R':
        case 'r':
            return 27;
            break;
        case 'S':
        case 's':
            return 28;
            break;
        case 'T':
        case 't':
            return 29;
            break;
        case 'U':
        case 'u':
            return 30;
            break;
        case 'V':
        case 'v':
            return 31;
            break;
        case 'W':
        case 'w':
            return 32;
            break;
        case 'X':
        case 'x':
            return 33;
            break;
        case 'Y':
        case 'y':
            return 34;
            break;
        case 'Z':
        case 'z':
            return 35;
            break;
        default:
            return 36;
            break;


    }

    /*
    if(ch=='A')
        return 10;
    else if(ch=='B')
        return 11;
    else if(ch=='C')
        return 12;
    else if(ch=='D')
        return 13;
    else if(ch=='E')
        return 14;
    else if(ch=='F')
        return 15;
    else if(ch=='G')
        return 16;
    else if(ch=='H')
        return 17;
    else if(ch=='I')
        return 18;
    else if(ch=='J')
        return 19;
    else if(ch=='K')
        return 20;
    else if(ch=='L')
        return 21;
    else if(ch=='M')
        return 22;
    else if(ch=='N')
        return 23;
    else if(ch=='O')
        return 24;
    else if(ch=='P')
        return 25;
    else if(ch=='Q')
        return 26;
    else if(ch=='R')
        return 27;
    else if(ch=='S')
        return 28;
    else if(ch=='T')
        return 29;
    else if(ch=='U')
        return 30;
    else if(ch=='V')
        return 31;
    else if(ch=='W')
        return 32;
    else if(ch=='X')
        return 33;
    else if(ch=='Y')
        return 34;
    else if(ch=='Z')
        return 35;
    else if(ch=='0')
        return 0;
    else if(ch=='1')
        return 1;
    else if(ch=='2')
        return 2;
    else if(ch=='3')
        return 3;
    else if(ch=='4')
        return 4;
    else if(ch=='5')
        return 5;
    else if(ch=='6')
        return 6;
    else if(ch=='7')
        return 7;
    else if(ch=='8')
        return 8;
    else if(ch=='9')
        return 9;
    else
        return 36;
    */
}

std::vector<string> changeBase(std::vector<int>& inputArr,std::vector<string>& outArr, int base)
{

    //cout<<"in change base"<<endl;

    long int remainder,quotient;
    int i=1,j,temp;
    char hexadecimalNumber[1000000];
    for (int k = 0; k <inputArr.size() ; ++k) {
        quotient = inputArr[k];
        while (quotient != 0) {
            temp = quotient % base;

            //To convert integer into character
            if (temp < 10)
                temp = temp + 48;
            else
                temp = temp + 55;

            hexadecimalNumber[i++] = temp;
            quotient = quotient / base;
        }
        //outArr[k]=hexadecimalNumber;
        //cout<<hexadecimalNumber<<endl;
        for (j = i - 1; j > 0; j--)
            outArr[k]+=hexadecimalNumber[j];

        memset(hexadecimalNumber, 0, sizeof hexadecimalNumber);
    }

    /*std::string s;
    std::ostringstream os;
    for (int k = 0; k <inputArr.size() ; ++k) {
         os<< std::hex << inputArr[k];
        s = os.str();
        outArr[k]=s;
        os.str("");
    }*/
    //cout<<"outArr :"<<outArr[0]<<endl;
    return outArr;
}
std::vector<int> convtodecnum(std::vector<string>& inputArr,std::vector<int>& outArr,int base)
{
    /*
    //cout<<"conv to dec num"<<endl;
    char hex[1000000];
    for (int j = 0; j < inputArr.size(); ++j) {

        char *hexstr;
        int length = 0;
        unsigned long decnum = 0;
        int i;
        strcpy(hex, inputArr[j].c_str());
        // Now Find the length of Hexadecimal Number
        for (hexstr = hex; *hexstr != '\0'; hexstr++) {
            length++;
        }

        // Now Find Hexadecimal Number
        hexstr = hex;
        for (i = 0; *hexstr != '\0' && i < length; i++, hexstr++) {
            // Compare *hexstr with ASCII values
            if (*hexstr >= 48 && *hexstr <= 57)   // is *hexstr Between 0-9
            {
                decnum += (((int) (*hexstr)) - 48) * pow(base, length - i - 1);
            }
            else if ((*hexstr >= 65 && *hexstr <= 96))   // is *hexstr Between A-F
            {
                decnum += (((int) (*hexstr)) - 55) * pow(base, length - i - 1);
            }
            else if (*hexstr >= 97 && *hexstr <= 127)   // is *hexstr Between a-f
            {
                decnum += (((int) (*hexstr)) - 87) * pow(base, length - i - 1);
            }
            else {
                cout << "Invalid Number \n";

            }
        }
        outArr[j]= decnum;
        memset(hex, 0, sizeof hex);
    }
     */
    int num;
    std::stringstream ss;
    for (int j = 0; j < inputArr.size(); ++j) {
        ss<<std::hex<<inputArr[j];
        ss>>num;
        outArr[j]=num;
    }
    return outArr;
}

#endif

